substitutions:
  stepper_id: stepper
  controller_id: controller
  stepper_motor_id_upper: ${device_name_upper}.stepper
  stepper_motor_id: ${device_name}_${stepper_id}
  controller: ${stepper_motor_id}_${controller_id}
  
esphome: 
  includes: 
    - stepper/helper_functions.h
    - stepper/steppercontroller.h
    - stepper/stepper_modes.h
    - stepper/stepper_error.h   

stepper:
  - platform: a4988
    id: ${stepper_motor_id}
    step_pin: ${stepper_step_pin}
    dir_pin:
      number: ${stepper_dir_pin}
      inverted: ${stepper_invert_direction}  
    max_speed: "${stepper_max_speed} steps/s"

    sleep_pin: ${stepper_sleep_pin} 
    acceleration: ${stepper_acceleration}
    deceleration: ${stepper_deceleration}
    
custom_component:
  - id: ${controller}
    lambda: |-
      auto controller = new cStepperController(${stepper_initial_full_turn_steps},
                                               ${stepper_initial_speed},
                                               ${stepper_max_speed},
                                               ${stepper_acceleration},
                                               ${stepper_max_acceleration},
                                               ${stepper_deceleration},
                                               ${stepper_max_deceleration},
                                               ${stepper_initial_step_width},
                                               "${device_name}",
                                               "${stepper_id}",
                                               "${controller_id}",
                                               id(${stepper_motor_id}),
                                               ${stepper_update_interval_ms},
                                               ${sensor_update_interval_slow_ms},
                                               ${sensor_update_interval_mid_ms},
                                               ${sensor_update_interval_fast_ms},
                                               ${sensor_update_interval_realtime_ms}
                                               );
      controller->set_component_source("steppercontroller"); 
      App.register_component(controller); 
      return {controller}; 
        
      
  
# make sure the stepper does not run while the ota update is performed            
ota:
  on_begin:
    then:
      lambda: |-
        get_controller(id(${controller}))->stop();
        get_controller(id(${controller}))->disable_motor();
      #- button.press: ${stepper_motor_id}_stop
   
globals:
    
  - id: stepper_mode                    
    type: int                           
    restore_value: no                   
    initial_value: "0"  
    
  - id: motor_enabled
    type: bool
    restore_value: no
    initial_value: "false"  
    
  - id: direction_forward
    type: bool
    restore_value: no
    initial_value: "true"
    
  - id: full_turn_steps
    type: int
    restore_value: yes
    initial_value: ${stepper_initial_full_turn_steps}
  
  - id: requested_target_position
    type: int
    restore_value: no
    initial_value: "0"  
  
  - id: target_position
    type: int
    restore_value: no
    initial_value: "0"
  
  - id: speed
    type: int
    restore_value: no
    initial_value: ${stepper_initial_speed}
  
  - id: requested_speed
    type: int
    restore_value: no
    initial_value: ${stepper_initial_speed}
    
  - id: acceleration
    type: int
    restore_value: no
    initial_value: ${stepper_acceleration}
  
  - id: deceleration
    type: int
    restore_value: no
    initial_value: ${stepper_deceleration}
    
  - id: step_width
    type: int
    restore_value: no
    initial_value: ${stepper_initial_step_width}   
    
  - id: stepper_error                
    type: int                           
    restore_value: no                   
    initial_value: "0"  
     
    
switch:    
  - platform: template
    name: ${stepper_motor_id_upper}.enable_motor
    id: ${stepper_motor_id}_enable_motor
    lambda: |-
      return get_controller(id(${controller}))->motor_enabled();
    turn_on_action:
      - lambda: |- 
          get_controller(id(${controller}))->enable_motor();
    turn_off_action:
      - lambda: |- 
          get_controller(id(${controller}))->disable_motor();

      
button:
  - platform: template
    name: ${stepper_motor_id_upper}.start
    id: ${stepper_motor_id}_start
    internal: true
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start();

      
  - platform: template
    name: ${stepper_motor_id_upper}.stop
    id: ${stepper_motor_id}_stop
    on_press:
      lambda: |-
        get_controller(id(${controller}))->stop();

  
  - platform: template
    name: ${stepper_motor_id_upper}.pause
    id: ${stepper_motor_id}_pause
    internal: "true"
    on_press:
      lambda: |-
        get_controller(id(${controller}))->pause();


  - platform: template
    name: ${stepper_motor_id_upper}.step_forward
    id: ${stepper_motor_id}_step_forward
    on_press:
      lambda: |-
        get_controller(id(${controller}))->step_forward();

      
  - platform: template
    name: ${stepper_motor_id_upper}.step_backward
    id: ${stepper_motor_id}_step_backward
    on_press:
      lambda: |-
        get_controller(id(${controller}))->step_backward();

  
  - platform: template
    name: ${stepper_motor_id_upper}.set_zero_position
    id: ${stepper_motor_id}_set_zero_position
    on_press:
      lambda: |-
        get_controller(id(${controller}))->set_current_position_to_zero();

    
  - platform: template
    name: ${stepper_motor_id_upper}.drive_forward
    id: ${stepper_motor_id}_drive_forward
    on_press:
      lambda: |-
        get_controller(id(${controller}))->drive_forward();


  - platform: template
    name: ${stepper_motor_id_upper}.drive_backward
    id: ${stepper_motor_id}_drive_backward
    on_press:
      lambda: |-
        get_controller(id(${controller}))->drive_backward();
   
   
  - platform: template
    name: ${stepper_motor_id_upper}.goto_home
    id: ${stepper_motor_id}_goto_home
    on_press:
      lambda: |-
        get_controller(id(${controller}))->goto_global_home();  
       
       
  - platform: template
    name: ${stepper_motor_id_upper}.goto_requested_target_position
    id: ${stepper_motor_id}_goto_requested_target_position
    on_press:
      lambda: |-
        get_controller(id(${controller}))->goto_requested_target();


  - platform: template
    name: ${stepper_motor_id_upper}.set_requested_speed
    id: ${stepper_motor_id}_set_requested_speed
    internal: true
    on_press:
      lambda: |-
        get_controller(id(${controller}))->set_speed_to_requested_speed();
