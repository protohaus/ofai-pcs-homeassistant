substitutions:
  stepper_id: stepper
  controller_id: controller
  stepper_motor_id_upper: ${device_name_upper}.stepper
  stepper_motor_id: ${device_name}_${stepper_id}
  controller: ${stepper_motor_id}_${controller_id}
  
esphome: 
  includes: 
    - stepper/steppercontroller.h
    - stepper/stepper_modes.h
    - stepper/stepper_error.h   

stepper:
  - platform: a4988
    id: ${stepper_motor_id}
    step_pin: ${stepper_step_pin}
    dir_pin:
      number: ${stepper_dir_pin}
      inverted: ${stepper_invert_direction}  
    max_speed: "${stepper_max_speed} steps/s"

    sleep_pin: ${stepper_sleep_pin} 
    acceleration: ${stepper_acceleration}
    deceleration: ${stepper_deceleration}
    
custom_component:
  - id: ${controller}
    lambda: |-
      auto controller = new cStepperController(${stepper_initial_speed},
                                               ${stepper_max_speed},
                                               ${stepper_acceleration},
                                               ${stepper_max_acceleration},
                                               ${stepper_deceleration},
                                               ${stepper_max_deceleration},
                                               ${stepper_initial_step_width},
                                               "${device_name}",
                                               "${stepper_id}",
                                               "${controller_id}",
                                               id(${stepper_motor_id}),
                                               id(${device_name}_proximity_home),
                                               id(${device_name}_proximity_global_home),
                                               id(${device_name}_proximity_pinion_wheel),
                                               id(${stepper_motor_id}_mode),
                                               ${stepper_update_interval_ms},
                                               ${sensor_update_interval_slow_ms},
                                               ${sensor_update_interval_mid_ms},
                                               ${sensor_update_interval_fast_ms},
                                               ${sensor_update_interval_realtime_ms},
                                               ${homing_high_speed},
                                               ${homing_mid_speed},
                                               ${homing_low_speed}
                                               );
      controller->set_component_source("custom.StepperController"); 
      App.register_component(controller); 
      return {controller}; 
        
      
  
# make sure the stepper does not run while the ota update is performed            
ota:
  on_begin:
    then:
      lambda: |-
        get_controller(id(${controller}))->stop();
        get_controller(id(${controller}))->disable_motor();
  
globals:
  - id: dummy
    type: bool
    restore_value: no
    initial_value: "false"
    
binary_sensor:
  - platform: template
    name: "${stepper_motor_id_upper}.active"
    id: ${stepper_motor_id}_active
    lambda: |-
      return get_controller(id(${controller}))->is_active();
    
  - platform: template
    name: "${stepper_motor_id_upper}.homing.is_valid"
    id: ${stepper_motor_id}_homing_is_valid
    lambda: |-
      return get_controller(id(${controller}))->homing_is_valid();
  
  - platform: gpio
    name: ${device_name_upper}.proximity.global_home
    id: ${device_name}_proximity_global_home
    pin: 
      number: ${sensor_proximity_switch_global_home_pin}
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms

  - platform: gpio
    name: ${device_name_upper}.proximity.home
    id: ${device_name}_proximity_home
    pin: 
      number: ${sensor_proximity_switch_home_pin}
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms    
    on_press:
      then:
        lambda: |-
          get_controller(id(${controller}))->proximity_switch_home_pressed();
    on_release:
      then:
        lambda: |-
          get_controller(id(${controller}))->proximity_switch_home_released();
    
  - platform: gpio
    name: ${device_name_upper}.proximity.pinion_wheel
    id: ${device_name}_proximity_pinion_wheel
    pin: 
      number: ${sensor_proximity_switch_pinion_wheel_pin}
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        lambda: |-
          get_controller(id(${controller}))->proximity_switch_pinion_wheel_pressed();
    on_release:
      then:
        lambda: |-
          get_controller(id(${controller}))->proximity_switch_pinion_wheel_released();
          
    
switch:    
  - platform: template
    name: ${stepper_motor_id_upper}.enable_motor
    id: ${stepper_motor_id}_enable_motor
    lambda: |-
      return get_controller(id(${controller}))->motor_enabled();
    turn_on_action:
      - lambda: |- 
          get_controller(id(${controller}))->enable_motor();
    turn_off_action:
      - lambda: |- 
          get_controller(id(${controller}))->disable_motor();

      
button:
  - platform: template
    name: ${stepper_motor_id_upper}.start
    id: ${stepper_motor_id}_start
    internal: true
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start();

  - platform: template
    name: ${stepper_motor_id_upper}.start_homing
    id: ${stepper_motor_id}_start_homing
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start_homing();
  
  - platform: template
    name: ${stepper_motor_id_upper}.start_rangeestimation
    id: ${stepper_motor_id}_start_rangeestimation
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start_rangeestimation();
        
  - platform: template
    name: ${stepper_motor_id_upper}.stop
    id: ${stepper_motor_id}_stop
    on_press:
      lambda: |-
        get_controller(id(${controller}))->stop();

  
  - platform: template
    name: ${stepper_motor_id_upper}.pause
    id: ${stepper_motor_id}_pause
    internal: "true"
    on_press:
      lambda: |-
        get_controller(id(${controller}))->pause();


  - platform: template
    name: ${stepper_motor_id_upper}.step_fw
    id: ${stepper_motor_id}_step_fw
    on_press:
      lambda: |-
        get_controller(id(${controller}))->step_forward();

      
  - platform: template
    name: ${stepper_motor_id_upper}.step_bw
    id: ${stepper_motor_id}_step_bw
    on_press:
      lambda: |-
        get_controller(id(${controller}))->step_backward();

  
  - platform: template
    name: ${stepper_motor_id_upper}.set_zero_position
    id: ${stepper_motor_id}_set_zero_position
    on_press:
      lambda: |-
        get_controller(id(${controller}))->set_current_position_to_zero();

    
  - platform: template
    name: ${stepper_motor_id_upper}.drive_fw
    id: ${stepper_motor_id}_drive_fw
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start_drive_forward();


  - platform: template
    name: ${stepper_motor_id_upper}.drive_bw
    id: ${stepper_motor_id}_drive_bw
    on_press:
      lambda: |-
        get_controller(id(${controller}))->start_drive_backward();
   
   
  - platform: template
    name: ${stepper_motor_id_upper}.goto_home
    id: ${stepper_motor_id}_goto_home
    on_press:
      lambda: |-
        get_controller(id(${controller}))->goto_global_home();  
       
  - platform: template
    name: ${stepper_motor_id_upper}.find_next_home
    id: ${stepper_motor_id}_find_next_home
    on_press:
      lambda: |-
        get_controller(id(${controller}))->find_next_home(); 
  
  - platform: template
    name: ${stepper_motor_id_upper}.find_next_global_home
    id: ${stepper_motor_id}_find_next_global_home
    on_press:
      lambda: |-
        get_controller(id(${controller}))->find_next_global_home();
        
  - platform: template
    name: ${stepper_motor_id_upper}.set_homing_valid
    id: ${stepper_motor_id}_set_homing_valid
    on_press:
      lambda: |-
        get_controller(id(${controller}))->set_homing_valid();       
        
  - platform: template
    name: ${stepper_motor_id_upper}.goto_requested_target_position
    id: ${stepper_motor_id}_goto_requested_target_position
    on_press:
      lambda: |-
        get_controller(id(${controller}))->goto_requested_target();


  - platform: template
    name: ${stepper_motor_id_upper}.set_requested_speed
    id: ${stepper_motor_id}_set_requested_speed
    internal: true
    on_press:
      lambda: |-
        get_controller(id(${controller}))->set_speed_requested();