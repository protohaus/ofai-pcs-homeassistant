globals:
  - id: measuring_full_turn_steps_started
    type: bool
    restore_value: no
    initial_value: "false"  
    
  - id: homing_found_full_turn_steps_low_precision
    type: bool
    restore_value: no
    initial_value: "false" 
    
  - id: homing_found_full_turn_steps_high_precision
    type: bool
    restore_value: no
    initial_value: "false" 

interval:
  - interval: 1.5s
    then:          
      #####################################################
      # measure full turn steps: go two rounds and calculate
      # the difference in steps between both "on_release" triggers
      # of the distance sensor
      # and check if the result is reasonable, 
      # TODO: if not reasonable -> set an error condition
      #####################################################
      if:
        condition:
          lambda: |-
            return id(stepper_mode) == id(stepper_mode_measure_full_turn_steps);
        then:
          # now make one full turn and calculate the "full turn steps" + check if they are reasonable
          # or if there are any errors
          - if:
              condition:
                lambda: |-
                  return !id(homing_found_full_turn_steps_low_precision);
              then:
                - button.press: ${stepper_motor_id}_set_homing_high_speed  
                - globals.set:
                    id: homing_enable_sensor
                    value: "true"                                   
                - globals.set:
                    id: direction_forward
                    value: "true"   
                - globals.set: 
                      id: target_position
                      value: !lambda 'return (id($stepper_motor_id).current_position + (id(direction_forward) == true ? 1 : -1) *  id(speed)*1.5);'        
                - button.press: ${stepper_motor_id}_start                            
              else:
                - if:
                    condition:
                      lambda: |-
                        return !id(homing_found_full_turn_steps_high_precision);                           
                    then:
                      - button.press: ${stepper_motor_id}_set_homing_low_speed  
                      - globals.set:
                          id: homing_enable_sensor
                          value: "true"                                    
                      - globals.set:
                          id: direction_forward
                          value: "true"   
                      - globals.set: 
                            id: target_position
                            value: !lambda 'return (id($stepper_motor_id).current_position + (id(direction_forward) == true ? 1 : -1) *  id(speed)*1.5);'        
                      - button.press: ${stepper_motor_id}_start  
                    else:
                      - globals.set:
                          id: full_turn_steps
                          value: !lambda 'return id($stepper_motor_id).current_position;' 
                      - button.press: ${stepper_motor_id}_set_zero_position
                      - globals.set:
                          id: homing_found_full_turn_steps_low_precision
                          value: "false"
                      - component.update: ${stepper_motor_id}_full_turn_steps
                      - globals.set:
                          id: homing_found_full_turn_steps_high_precision
                          value: "false"
                      - globals.set:
                          id: stepper_mode
                          value: !lambda 'return id(stepper_mode_ready);'
                      - globals.set:
                          id: homing_enable_sensor
                          value: "false" 
                        
        else:
          - globals.set:
              id: homing_found_full_turn_steps_low_precision
              value: "false"
          - globals.set:
              id: homing_found_full_turn_steps_high_precision
              value: "false"      