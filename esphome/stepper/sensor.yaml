sensor:
  - platform: template
    name: "${stepper_motor_id_upper}.position_now"
    id: ${stepper_motor_id}_position_now
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->current_position();
    update_interval: ${sensor_update_interval_realtime}
    
  - platform: template
    name: "${stepper_motor_id_upper}.target_position"
    id: ${stepper_motor_id}_target_position
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->target_position();
    update_interval: ${sensor_update_interval_fast}
    
  - platform: template
    name: "${stepper_motor_id_upper}.requested_target_position"
    id: ${stepper_motor_id}_requested_target_position
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->requested_target_position();
    update_interval: ${sensor_update_interval_fast} 
    
    
  - platform: template
    name: "${stepper_motor_id_upper}.speed"
    id: ${stepper_motor_id}_speed
    unit_of_measurement: "steps/s"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->speed();
    update_interval: ${sensor_update_interval_fast}
    
  - platform: template
    name: "${stepper_motor_id_upper}.acceleration"
    id: ${stepper_motor_id}_acceleration
    unit_of_measurement: "steps/s^2"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->acceleration();
    update_interval: ${sensor_update_interval_fast}
    
  - platform: template
    name: "${stepper_motor_id_upper}.deceleration"
    id: ${stepper_motor_id}_deceleration
    unit_of_measurement: "steps/s^2"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->deceleration();
    update_interval: ${sensor_update_interval_fast}
   
  - platform: template
    name: "${stepper_motor_id_upper}.step_width"
    id: ${stepper_motor_id}_step_width
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->step_width();
    update_interval: ${sensor_update_interval_fast}   
  
  - platform: template
    name: "${stepper_motor_id_upper}.full_turn_steps"
    id: ${stepper_motor_id}_full_turn_steps
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return get_controller(id(${stepper_motor_id}_controller))->full_turn_steps();
    update_interval: ${sensor_update_interval_mid}   
    
  - platform: template
    name: "${stepper_motor_id_upper}.full_turn_steps_average"
    id: ${stepper_motor_id}_full_turn_steps_average
    unit_of_measurement: "steps"
    state_class: "measurement"
    lambda: |-
      return id(rangeestimation_range_average);
    update_interval: ${sensor_update_interval_mid} 
    
  - platform: template
    name: "${stepper_motor_id_upper}.mode"
    id: ${stepper_motor_id}_mode
    state_class: ""
    lambda: |-
      return id(stepper_mode);
    update_interval: ${sensor_update_interval_mid} 