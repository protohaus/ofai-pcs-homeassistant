globals:
  - id: homing_started
    type: bool
    restore_value: no
    initial_value: "false"
    
  - id: homing_high_speed
    type: int
    restore_value: no
    initial_value: ${stepper_homing_high_speed}
    
  - id: homing_low_speed
    type: int
    restore_value: no
    initial_value: ${stepper_homing_low_speed}   

  - id: homing_enable_sensor
    type: bool
    restore_value: no
    initial_value: "false"
    
  - id: homing_found_global_home
    type: bool
    restore_value: no
    initial_value: "false"    
    
  - id: homing_found_home_low_precision
    type: bool
    restore_value: no
    initial_value: "false"
  
  - id: homing_found_home_high_precision
    type: bool
    restore_value: no
    initial_value: "false"
  
  

button:
  - platform: template
    name: ${stepper_motor_id_upper}.set_homing_high_speed
    id: ${stepper_motor_id}_set_homing_high_speed
    internal: true
    on_press:
      - logger.log: "Set speed to homing high speed"
      - stepper.set_speed:
          id: ${stepper_motor_id}
          speed: !lambda 'return id(homing_high_speed);'  
      - globals.set: 
          id: speed
          value: !lambda 'return id(homing_high_speed);' 
  
  - platform: template
    name: ${stepper_motor_id_upper}.set_homing_low_speed
    id: ${stepper_motor_id}_set_homing_low_speed
    internal: true
    on_press:
      - logger.log: "Set speed to homing low speed"
      - stepper.set_speed:
          id: ${stepper_motor_id}
          speed: !lambda 'return id(homing_low_speed);'  
      - globals.set: 
          id: speed
          value: !lambda 'return id(homing_low_speed);' 
           
  - platform: template
    name: ${stepper_motor_id_upper}.set_requested_speed
    id: ${stepper_motor_id}_set_requested_speed
    internal: true
    on_press:
      - logger.log: "Set speed to requested speed"
      - stepper.set_speed:
          id: ${stepper_motor_id}
          speed: !lambda 'return id(requested_speed);'  
      - globals.set: 
          id: speed
          value: !lambda 'return id(requested_speed);' 
  
  - platform: template
    name: ${stepper_motor_id_upper}.start_homing
    id: ${stepper_motor_id}_start_homing
    on_press:
      - logger.log: "Start homing"
      - globals.set:
          id: stepper_mode
          value: !lambda 'return id(stepper_mode_homing);'
      - component.update: ${stepper_motor_id}_mode
  
binary_sensor:
  - platform: gpio
    name: ${device_name_upper}.inductivity_global_home_pin
    id: ${device_name}_inductivity_global_home_pin
    pin: 
      number: ${stepper_inductivity_global_home_pin}
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 100ms
    on_press:
      then:
        - globals.set:
            id: homing_found_global_home 
            value: "true"
    on_release:
      then:
        - globals.set:
            id: homing_found_global_home  
            value: "false"
            
            
  - platform: gpio
    name: ${device_name_upper}.inductivity_home
    id: ${device_name}_inductivity_home
    pin: 
      number: ${stepper_inductivity_home_pin}
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 50ms
     
    on_press:
      then:
        if:
          condition:
            lambda: |-
              if (id(homing_found_global_home) && 
                  id(homing_enable_sensor) && 
                  id(homing_started))
                return true;
          then:
            if:
              condition:
                lambda: |-
                  return !id(homing_found_home_low_precision);
              then:
                - button.press: ${stepper_motor_id}_pause
                - globals.set:
                    id: homing_found_home_low_precision
                    value: "true"
                - globals.set:
                    id: homing_enable_sensor
                    value: "false"  
                - button.press: ${stepper_motor_id}_pause
            #else:
            #  if:
            #    condition:
            #      lambda: |-
            #        if (id(homing_enable_sensor) && id(measuring_full_turn_steps_started))
            #          return true;      
            #      then:
            #        if:
            #          condition:
            #            lambda: |-
            #              return !id(homing_found_full_turn_steps_low_precision);
            #          then:
            #            - button.press: ${stepper_motor_id}_pause
            #            - globals.set:
            #                id: homing_found_full_turn_steps_low_precision
            #                value: "true"
            #            - globals.set:
            #                id: homing_enable_sensor
            #                value: "false"  
            #            - button.press: ${stepper_motor_id}_pause
          
    on_release:
      then:
        if:
          condition:
            lambda: |-
              if (id(homing_found_global_home) && 
                  id(homing_enable_sensor) && 
                  id(homing_started))
                return true; 
          then:
            if:
              condition:
                lambda: |-
                  return id(homing_found_home_low_precision);
              then:
                if:
                  condition:
                    lambda: |-
                      return !id(homing_found_home_high_precision);
                  then:
                    - button.press: ${stepper_motor_id}_pause
                    - globals.set:
                        id: homing_found_home_high_precision
                        value: "true"
                    - globals.set:
                        id: homing_enable_sensor
                        value: "false"  
                    - button.press: ${stepper_motor_id}_pause
          #else:        
          #  if:
          #    condition:
          #      lambda: |-
          #        if (id(homing_enable_sensor) && id(measuring_full_turn_steps_started))
          #          return true;      
          #      then:       
          #        if:
          #          condition:
          #            lambda: |-
          #              return id(homing_found_full_turn_steps_low_precision);
          #          then:
          #            if:
          #              condition:
          #                lambda: |-
          #                  return !id(homing_found_full_turn_steps_high_precision);
          #              then:
          #                - button.press: ${stepper_motor_id}_pause
          #                - globals.set:
          #                    id: homing_found_full_turn_steps_high_precision
          #                    value: "true"
          #                - globals.set:
          #                    id: homing_enable_sensor
          #                    value: "false"  
          #                - button.press: ${stepper_motor_id}_pause
                      
    
    
    
interval:
  - interval: 1s
    then:
      #####################################################
      # homing mode: find out, if we already are on the homing position/sensor is already active
      # if so: drive backward until sensor turns off
      # then, start homing procedure:
      # drive forward with homing high speed until sensor detects home position at low accuracy
      # drive slowly forward until sensor detects "on_release" and set home position to this point
      #####################################################
      if:
        condition:
          lambda: |-
            return id(stepper_mode) == id(stepper_mode_homing);
        then:
          if:
            condition:
              lambda: |-
                return !id(homing_started);
            then:
              if:
                condition:
                  binary_sensor.is_on: ${device_name}_inductivity_home
                then:
                  - button.press: ${stepper_motor_id}_set_homing_high_speed
                  - globals.set: 
                      id: direction_forward
                      value: "false"
                  - globals.set: 
                      id: target_position
                      value: !lambda 'return (id($stepper_motor_id).current_position + (id(direction_forward) == true ? 1 : -1) *  id(speed)*3);'        
                  - button.press: ${stepper_motor_id}_start
                else:
                  - globals.set: 
                      id: homing_started
                      value: "true"
            else:
              if:
                condition:
                  lambda: |-
                    return !id(homing_found_home_low_precision);
                then:
                  - button.press: ${stepper_motor_id}_set_homing_high_speed    
                  - globals.set:
                      id: homing_enable_sensor
                      value: "true"   
                  - globals.set:
                      id: direction_forward
                      value: "true"                            
                  - globals.set: 
                        id: target_position
                        value: !lambda 'return (id($stepper_motor_id).current_position + (id(direction_forward) == true ? 1 : -1) *  id(speed)*1.5);'        
                  - button.press: ${stepper_motor_id}_start
                else:
                  if:
                    condition:
                      lambda: |-
                        return !id(homing_found_home_high_precision);
                    then:
                      - button.press: ${stepper_motor_id}_set_homing_low_speed  
                      - globals.set:
                          id: homing_enable_sensor
                          value: "true"                            
                      - globals.set:
                          id: direction_forward
                          value: "false"   
                      - globals.set: 
                            id: target_position
                            value: !lambda 'return (id($stepper_motor_id).current_position + (id(direction_forward) == true ? 1 : -1) *  id(speed)*1.5);'        
                      - button.press: ${stepper_motor_id}_start  
                    else:
                      - button.press: ${stepper_motor_id}_set_zero_position
                      - globals.set:
                          id: stepper_mode
                          value: !lambda 'return id(stepper_mode_ready);'
                      - component.update: ${stepper_motor_id}_mode
                      - globals.set:
                          id: homing_enable_sensor
                          value: "false" 
                      - button.press: ${stepper_motor_id}_set_requested_speed     
        else:
          - globals.set:
              id: homing_started
              value: "false"
          - globals.set:
              id: homing_found_home_low_precision
              value: "false"
          - globals.set:
              id: homing_found_home_high_precision
              value: "false" 
          - globals.set:
              id: homing_enable_sensor
              value: "false" 