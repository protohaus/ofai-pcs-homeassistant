esphome: 
  on_boot:
    priority: -200 # Highest priority, ensures enable pin to be turned off first
    then:
      - output.turn_off: ${stepper_motor_id}_enable_pin # set the enable pin to HIGH -> disables all motor functions
      - switch.turn_off: ${device_name}_fan
      
output:
  - platform: gpio
    pin: ${stepper_enable_pin}
    id: ${stepper_motor_id}_enable_pin

switch:
  - platform: gpio
    pin: ${fan_pin}
    name: ${device_name_upper}.fan
    id: ${device_name}_fan
    inverted: "true"
    internal: "true"
    
binary_sensor:
  - platform: template
    name: "${stepper_motor_id_upper}.sleep"
    id: ${stepper_motor_id}_sleep
    lambda: |-
      if (!get_controller(id(${controller}))->is_active()) 
      {
        return true;
      }else 
      {
        // Motor is at target position
        return false;
      } 
    on_press:
      then:
        - output.turn_on: ${stepper_motor_id}_enable_pin
        - switch.turn_off: ${device_name}_fan
    on_release:
        - output.turn_off: ${stepper_motor_id}_enable_pin
        - switch.turn_on: ${device_name}_fan

  - platform: gpio
    name: ${stepper_motor_id_upper}.diag_pin_1
    id: ${stepper_motor_id}_diag_pin_1
    pin: 
      number: ${stepper_diag_pin_1}
      mode:
        input: true
        pullup: true
      inverted: false
    on_press:
      lambda: |-
        get_controller(id(${controller}))->emergency_stop("DIAG Pin 1 == HIGH", STEPPER_ERROR_DIAG);
      
  - platform: gpio
    name: ${stepper_motor_id_upper}.diag_pin_2
    id: ${stepper_motor_id}_diag_pin_2
    pin: 
      number: ${stepper_diag_pin_2}
      mode:
        input: true
        pullup: true
      inverted: false
    on_press:
      lambda: |-
        get_controller(id(${controller}))->emergency_stop("DIAG Pin 2 == HIGH", STEPPER_ERROR_DIAG);
      
  - platform: gpio
    name: ${stepper_motor_id_upper}.diag_pin_3
    id: ${stepper_motor_id}_diag_pin_3
    pin: 
      number: ${stepper_diag_pin_3}
      mode:
        input: true
        pullup: true
      inverted: false
    on_press:
      lambda: |-
        get_controller(id(${controller}))->emergency_stop("DIAG Pin 3 == HIGH", STEPPER_ERROR_DIAG);
      
interval:
  - interval: 60s
    then:
      if:
        condition:
          lambda: |-
            return (get_controller(id(${controller}))->is_active() == true ? true : false);
        then:
          - switch.turn_on: ${device_name}_fan
          - delay: 40s
          - switch.turn_off: ${device_name}_fan
        else:
          - switch.turn_off: ${device_name}_fan