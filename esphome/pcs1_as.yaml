substitutions:
  #general settings
  host_name: pcs1-as
  device_name: pcs1_as
  device_name_upper: pcs1.as
  status_led_interval_ok: 10s
  status_led_interval_booting: 3s
  
  #I2C Bus
  i2c_bus_a_name: i2c_bus_a
  i2c_bus_a_sda: GPIO23
  i2c_bus_a_scl: GPIO22
  
  #Temp Enable Pin
  enable_rtd_pin: GPIO33
  enable_aux_pin: GPIO27
  enable_ec_pin: GPIO12
  enable_ph_pin: GPIO13
  
  # webserver
  web_server_ota_active: "true"
  
  # EZO Settings
  min_sample_interval_ec: "2000" # 1s
  max_sample_interval_ec: "3600000" # 60min
  
  min_sample_interval_ph: "2000" # 1s
  max_sample_interval_ph: "3600000" # 60min
  
  min_sample_interval_rtd: "1000" # 1s
  max_sample_interval_rtd: "3600000" # 60min
  
  min_sample_interval_ec_tempcomp: "10000" 
  max_sample_interval_ec_tempcomp: "3600000"
  
  min_sample_interval_ph_tempcomp: "10000" 
  max_sample_interval_ph_tempcomp: "3600000"
  
  max_retry_attempts: "4"
  default_temp_comp_value: "25"
  
esphome:
  name: ${host_name}
  platform: ESP32
  board: esp32dev
  #board: nodemcu-32s
  #name_add_mac_suffix: "true"  
  on_boot:
    priority: -200 # Highest priority, ensures enable pin to be turned off first
    then:
      - lambda: |-
          id(${device_name}_ec).set_sensor_type(esphome::ezo::SENSOR_TYPE_EC);
          id(${device_name}_ph).set_sensor_type(esphome::ezo::SENSOR_TYPE_PH);
          id(${device_name}_rtd).set_sensor_type(esphome::ezo::SENSOR_TYPE_RTD);
          
          /***************************************************************
          * enable/disable sensors depending on last boot sensor states
          ***************************************************************/
          if(id(ec_enabled))
            id(${device_name}_ec_enable).turn_on();
          else
            id(${device_name}_ec_enable).turn_off();
          
          if(id(rtd_enabled))
            id(${device_name}_rtd_enable).turn_on();
          else
            id(${device_name}_rtd_enable).turn_off();
          
          if(id(ph_enabled))
            id(${device_name}_ph_enable).turn_on();
          else
            id(${device_name}_ph_enable).turn_off();
          
            
          /***************************************************************
          * enable/disable temp compensation depending on last boot states
          ***************************************************************/  
          if(id(ec_tempcomp_enabled))
            id(${device_name}_ec_tempcomp).turn_on();
          else
            id(${device_name}_ec_tempcomp).turn_off();
          
          if(id(ph_tempcomp_enabled))
            id(${device_name}_ph_tempcomp).turn_on();
          else
            id(${device_name}_ph_tempcomp).turn_off();
            
          /***************************************************************
          * enable/disable value sending
          ***************************************************************/  
          
          if(id(ec_sending_enabled))
            id(${device_name}_ec_enable_sending_values).turn_on();
          else
            id(${device_name}_ec_enable_sending_values).turn_off();
          
          if(id(ph_sending_enabled))
            id(${device_name}_ph_enable_sending_values).turn_on();
          else
            id(${device_name}_ph_enable_sending_values).turn_off();
          
          if(id(rtd_sending_enabled))
            id(${device_name}_rtd_enable_sending_values).turn_on();
          else
            id(${device_name}_rtd_enable_sending_values).turn_off();
          

# Enable logging
logger:
  level: DEBUG
  
preferences:
  flash_write_interval: 1min
  
packages:
  common_wifi: !include common/wifi.yaml
  common_base: !include common/base.yaml
  common_status: !include common/status.yaml
  common_restart: !include common/restart.yaml
  common_i2c_bus_a: !include common/i2c_bus_a.yaml
  common_web_server: !include common/web_server.yaml
  #common_stream_server: !include common/stream_server.yaml
  #common_api_encryption: !include common/api_encryption.yaml

globals:
   
  ############################################################
  ##
  ##  STORE ENABLE STATES
  ##
  ############################################################
   
   - id: ec_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: ph_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   - id: rtd_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: ec_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: ph_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   - id: rtd_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   ############################################################
   ##
   ##  STORE TEMPCOMP SETTINGS
   ##
   ############################################################
  
   - id: ec_tempcomp_enabled
     type: bool
     restore_value: yes
     initial_value: 'false'
   
   - id: ph_tempcomp_enabled
     type: bool
     restore_value: yes
     initial_value: 'false'
     
   - id: tempcomp_default_value
     type: float
     restore_value: no
     initial_value: ${default_temp_comp_value}
     
   - id: ec_tempcomp_timestamp_0
     type: int
     restore_value: no
     initial_value: '0' 
   
   - id: ph_tempcomp_timestamp_0
     type: int
     restore_value: no
     initial_value: '0' 

output:

  ############################################################
  ##
  ##  ENABLE GPIO PINS
  ##
  ############################################################
  
  - platform: gpio
    pin: ${enable_ec_pin}
    id: ${device_name}_ec_enable_pin
  
  - platform: gpio
    pin: ${enable_ph_pin}
    id: ${device_name}_ph_enable_pin
    
  - platform: gpio
    pin: ${enable_rtd_pin}
    id: ${device_name}_rtd_enable_pin
     
switch:
  
  ############################################################
  ##
  ##  TEMPERATURE COMPENSATION
  ##
  ############################################################
  
  - platform: template
    name: ${device_name_upper}.ec.tempcomp
    id: ${device_name}_ec_tempcomp
    lambda: |-
      return id(ec_tempcomp_enabled);
    turn_on_action:
      - lambda: |-
          id(ec_tempcomp_enabled) = true;
          id(ec_tempcomp_timestamp_0) = millis();
    turn_off_action:
      - lambda: |-
          id(ec_tempcomp_enabled) = false;
  
  - platform: template
    name: ${device_name_upper}.ph.tempcomp
    id: ${device_name}_ph_tempcomp
    lambda: |-
      return id(ph_tempcomp_enabled);
    turn_on_action:
      - lambda: |-
          id(ph_tempcomp_enabled) = true;
          id(ph_tempcomp_timestamp_0) = millis();
    turn_off_action:
      - lambda: |-
          id(ph_tempcomp_enabled) = false;
          
  ############################################################
  ##
  ##  CALIBRATION MODE
  ##
  ############################################################
  - platform: template
    name: ${device_name_upper}.rtd.cal.activate
    id: ${device_name}_rtd_cal_activate
    lambda: |-
      return id(${device_name}_rtd).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_rtd).activate_calibration();
    turn_off_action:
      - lambda: |-
          id(${device_name}_rtd).deactivate_calibration();
  
  - platform: template
    name: ${device_name_upper}.ph.cal.activate
    id: ${device_name}_ph_cal_activate
    lambda: |-
      return id(${device_name}_ph).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).activate_calibration();
      
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).deactivate_calibration();
          
  - platform: template
    name: ${device_name_upper}.ec.cal.activate
    id: ${device_name}_ec_cal_activate
    restore_state: "true"
    lambda: |-
      return id(${device_name}_ec).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ec).activate_calibration();
      
    turn_off_action:
      - lambda: |-
          id(${device_name}_ec).deactivate_calibration();

  ############################################################
  ##
  ##  ENABLE/DISABLE SENSORS
  ##
  ############################################################
  
  - platform: template
    id: ${device_name}_rtd_enable
    name: ${device_name_upper}.rtd.enable
    lambda: |-
      return id(${device_name}_rtd).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_rtd).enable_sensor();
      - globals.set:
          id: rtd_enabled
          value: "true"
      - output.turn_on: ${device_name}_rtd_enable_pin
    turn_off_action:
      - lambda: |-
          id(${device_name}_rtd).disable_sensor();
      - globals.set:
          id: rtd_enabled
          value: "false"
      - output.turn_off: ${device_name}_rtd_enable_pin 
      - switch.turn_off: ${device_name}_ec_enable
      - switch.turn_off: ${device_name}_ph_enable
   
  - platform: template
    id: ${device_name}_ec_enable
    name: ${device_name_upper}.ec.enable
    lambda: |-
      return id(${device_name}_ec).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ec).enable_sensor();
      - globals.set:
          id: ec_enabled
          value: "true"
      - output.turn_off: ${device_name}_ec_enable_pin
      - switch.turn_on: ${device_name}_rtd_enable
    turn_off_action:
      - lambda: |-
          id(${device_name}_ec).disable_sensor();
      - globals.set:
          id: ec_enabled
          value: "false"
      - output.turn_on: ${device_name}_ec_enable_pin 
    
  - platform: template
    id: ${device_name}_ph_enable
    name: ${device_name_upper}.ph.enable
    lambda: |-
      return id(${device_name}_ph).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).enable_sensor();
      - globals.set:
          id: ph_enabled
          value: "true"
      - output.turn_off: ${device_name}_ph_enable_pin
      - switch.turn_on: ${device_name}_rtd_enable
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).disable_sensor();
      - globals.set:
          id: ph_enabled
          value: "false"
      - output.turn_on: ${device_name}_ph_enable_pin 

  ############################################################
  ##
  ##  ENABLE / DISABLE VALUE SENDING
  ##
  ############################################################
  
  - platform: template
    id: ${device_name}_rtd_enable_sending_values
    name: ${device_name_upper}.rtd.enable_sending_values
    lambda: |-
      return id(${device_name}_rtd).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_rtd).enable_sending_values();
          id(rtd_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_rtd).disable_sending_values();
          id(rtd_sending_enabled) = false;
          
  - platform: template
    id: ${device_name}_ph_enable_sending_values
    name: ${device_name_upper}.ph.enable_sending_values
    lambda: |-
      return id(${device_name}_ph).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).enable_sending_values();
          id(ph_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).disable_sending_values();
          id(ph_sending_enabled) = false;
   
  - platform: template
    id: ${device_name}_ec_enable_sending_values
    name: ${device_name_upper}.ec.enable_sending_values
    lambda: |-
      return id(${device_name}_ec).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ec).enable_sending_values();
          id(ec_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_ec).disable_sending_values();
          id(ec_sending_enabled) = false;

   
button:
  
  ############################################################
  ##
  ##  ENABLE/DISABLE ALL SENSORS
  ##
  ############################################################
  - platform: template
    name: ${device_name_upper}.all.enable
    id: ${device_name}_all_enable
    on_press:
      - switch.turn_on: ${device_name}_rtd_enable
      - switch.turn_on: ${device_name}_ec_enable
      - switch.turn_on: ${device_name}_ph_enable
  
  - platform: template
    name: ${device_name_upper}.all.disable
    id: ${device_name}_all_disable
    on_press:
      - switch.turn_off: ${device_name}_rtd_enable
      - switch.turn_off: ${device_name}_ec_enable
      - switch.turn_off: ${device_name}_ph_enable
  
  ############################################################
  ##
  ##  PH CALIBRATION METHODS
  ##
  ############################################################ 
  - platform: template
    name: ${device_name_upper}.ph.cal.check
    id: ${device_name}_ph_cal_check
    on_press:
      lambda: |-
        id(${device_name}_ph).start_calibration_check(); 
        
  - platform: template
    name: ${device_name_upper}.ph.cal.clear
    id: ${device_name}_ph_cal_clear
    on_press:
      lambda: |-
        id(${device_name}_ph).start_calibration_clear();  
        
  - platform: template
    name: ${device_name_upper}.ph.cal.mid
    id: ${device_name}_ph_cal_mid
    on_press:
      lambda: |-
        id(${device_name}_ph).start_calibration_ph_mid();
        
  - platform: template
    name: ${device_name_upper}.ph.cal.high
    id: ${device_name}_ph_cal_high
    on_press:
      lambda: |-
        id(${device_name}_ph).start_calibration_ph_high();
        
  - platform: template
    name: ${device_name_upper}.ph.cal.low
    id: ${device_name}_ph_cal_low
    on_press:
      lambda: |-
        id(${device_name}_ph).start_calibration_ph_low();
        
  ############################################################
  ##
  ##  EC CALIBRATION METHODS
  ##
  ############################################################       
  - platform: template
    name: ${device_name_upper}.ec.cal.check
    id: ${device_name}_ec_cal_check
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_check(); 
        
  - platform: template
    name: ${device_name_upper}.ec.cal.clear
    id: ${device_name}_ec_cal_clear
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_clear();  
  
  - platform: template
    name: ${device_name_upper}.ec.cal.dry
    id: ${device_name}_ec_cal_dry
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_ec_dry(); 
  
  - platform: template
    name: ${device_name_upper}.ec.cal.single_point
    id: ${device_name}_ec_cal_single_point
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_ec();   
  
  - platform: template
    name: ${device_name_upper}.ec.cal.high
    id: ${device_name}_ec_cal_high
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_ec_high();
  
  - platform: template
    name: ${device_name_upper}.ec.cal.low
    id: ${device_name}_ec_cal_low
    on_press:
      lambda: |-
        id(${device_name}_ec).start_calibration_ec_low();  
        
  - platform: template
    name: ${device_name_upper}.ec.k_value.check
    id: ${device_name}_ec_k_value_check
    on_press:
      lambda: |-
        id(${device_name}_ec).start_send_ec_k_value(); 
  
  - platform: template
    name: ${device_name_upper}.ec.k_value.send
    id: ${device_name}_ec_k_value_send
    on_press:
      lambda: |-
        id(${device_name}_ec).start_check_ec_k_value();
  
  ############################################################
  ##
  ##  TEMP CALIBRATION METHODS
  ##
  ############################################################  
  - platform: template
    name: ${device_name_upper}.rtd.cal.check
    id: ${device_name}_rtd_cal_check
    on_press:
      lambda: |-
        id(${device_name}_rtd).start_calibration_check(); 
        
  - platform: template
    name: ${device_name_upper}.rtd.cal.clear
    id: ${device_name}_rtd_cal_clear
    on_press:
      lambda: |-
        id(${device_name}_rtd).start_calibration_clear();  
        
  - platform: template
    name: ${device_name_upper}.rtd.cal
    id: ${device_name}_rtd_cal
    on_press:
      lambda: |-
        id(${device_name}_rtd).start_calibration_rtd(); 
   
  ############################################################
  ##
  ##  FACTORY RESET
  ##
  ############################################################
  - platform: template
    name: ${device_name_upper}.rtd.factory_reset
    id: ${device_name}_rtd_factory_reset
    on_press:
      lambda: |-
        id(${device_name}_rtd).start_factory_reset();
  
  - platform: template
    name: ${device_name_upper}.ec.factory_reset
    id: ${device_name}_ec_factory_reset
    on_press:
      lambda: |-
        id(${device_name}_ec).start_factory_reset();
  
  - platform: template
    name: ${device_name_upper}.ph.factory_reset
    id: ${device_name}_ph_factory_reset
    on_press:
      lambda: |-
        id(${device_name}_ph).start_factory_reset(); 
        
number:
  
  ############################################################
  ##
  ##  SAMPLE INTERVAL TIMES IN [MS]
  ##
  ############################################################
  
  - platform: template
    min_value: ${min_sample_interval_rtd}
    max_value: ${max_sample_interval_rtd}
    step: "1"
    id: ${device_name}_rtd_sample_interval
    name: ${device_name}.rtd.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_rtd}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_rtd).set_sample_interval(x);
  
  - platform: template
    min_value: ${min_sample_interval_ph}
    max_value: ${max_sample_interval_ph}
    step: "1"
    id: ${device_name}_ph_sample_interval
    name: ${device_name}.ph.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ph}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_ph).set_sample_interval(x);
         
  - platform: template
    min_value: ${min_sample_interval_ec}
    max_value: ${max_sample_interval_ec}
    step: "1"
    id: ${device_name}_ec_sample_interval
    name: ${device_name}.ec.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ec}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_ec).set_sample_interval(x);
  

  ############################################################
  ##
  ##  TEMPCOMP INTERVAL TIMES IN [MS]
  ##
  ############################################################
  - platform: template
    min_value: ${min_sample_interval_ec_tempcomp}
    max_value: ${max_sample_interval_ec_tempcomp}
    step: "1"
    id: ${device_name}_ec_tempcomp_sample_interval
    name: ${device_name}.ec.tempcomp.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ec_tempcomp}
    update_interval: "10s"
    unit_of_measurement: "ms"
  
  - platform: template
    min_value: ${min_sample_interval_ph_tempcomp}
    max_value: ${max_sample_interval_ph_tempcomp}
    step: "1"
    id: ${device_name}_ph_tempcomp_sample_interval
    name: ${device_name}.ph.tempcomp.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ph_tempcomp}
    update_interval: "10s"
    unit_of_measurement: "ms"
  
  ############################################################
  ##
  ##  PH CALIBRATION POINTS
  ##
  ############################################################
  - platform: template
    min_value: "0"
    max_value: "14"
    step: "0.01"
    id: ${device_name}_ph_cal_mid_value
    name: ${device_name}.ph.cal.mid_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "7.0"
    update_interval: "10s"
    unit_of_measurement: "mol/l"
    on_value:
      - lambda: |-
         id(${device_name}_ph).set_ph_cal_mid_value(x);
  
  - platform: template
    min_value: "0"
    max_value: "14"
    step: "0.01"
    id: ${device_name}_ph_cal_high_value
    name: ${device_name}.ph.cal.high_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "10.0"
    update_interval: "10s"
    unit_of_measurement: "mol/l"
    on_value:
      - lambda: |-
         id(${device_name}_ph).set_ph_cal_high_value(x);  
   
  - platform: template
    min_value: "0"
    max_value: "14"
    step: "0.01"
    id: ${device_name}_ph_cal_low_value
    name: ${device_name}.ph.cal.low_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "4.0"
    update_interval: "10s"
    unit_of_measurement: "mol/l"
    on_value:
      - lambda: |-
         id(${device_name}_ph).set_ph_cal_low_value(x);  
         
  ############################################################
  ##
  ##  EC CALIBRATION POINTS
  ##
  ############################################################  
  - platform: template
    min_value: "0"
    max_value: "100000.0"
    step: "0.01"
    id: ${device_name}_ec_cal_single_value
    name: ${device_name}.ec.cal.single_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "80000.0"
    update_interval: "10s"
    unit_of_measurement: "S/m"
    on_value:
      - lambda: |-
         id(${device_name}_ec).set_ec_cal_value(x);  
   
  - platform: template
    min_value: "0"
    max_value: "100000.0"
    step: "0.01"
    id: ${device_name}_ec_cal_high_value
    name: ${device_name}.ec.cal.high_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "80000.0"
    update_interval: "10s"
    unit_of_measurement: "S/m"
    on_value:
      - lambda: |-
         id(${device_name}_ec).set_ec_cal_high_value(x);   
  
  - platform: template
    min_value: "0"
    max_value: "100000.0"
    step: "0.01"
    id: ${device_name}_ec_cal_low_value
    name: ${device_name}.ec.cal.low_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "12880.0"
    update_interval: "10s"
    unit_of_measurement: "S/m"
    on_value:
      - lambda: |-
         id(${device_name}_ec).set_ec_cal_low_value(x);   
         
  - platform: template
    min_value: "0.1"
    max_value: "10.0"
    step: "0.01"
    id: ${device_name}_ec_k_value
    name: ${device_name}.ec.k_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "1.0"
    update_interval: "10s"
    unit_of_measurement: ""
    on_value:
      - lambda: |-
         id(${device_name}_ec).set_ec_k_value(x); 
   
  ############################################################
  ##
  ##  TEMP CALIBRATION POINT
  ##
  ############################################################  
  - platform: template
    min_value: "0"
    max_value: "100.0"
    step: "0.01"
    id: ${device_name}_rtd_cal_value
    name: ${device_name}.rtd.cal.cal_value
    optimistic: true
    mode: box
    restore_value : true
    initial_value: "100.0"
    update_interval: "10s"
    unit_of_measurement: "°C"
    on_value:
      - lambda: |-
         id(${device_name}_rtd).set_rtd_cal_value(x);   
         
sensor:
  
  ############################################################
  ##
  ##  SENSOR DEFINITIONS
  ##
  ############################################################
  
  - platform: custom_ezo
    id: ${device_name}_rtd
    name: ${device_name_upper}.rtd
    address: 102
    accuracy_decimals: 2
    unit_of_measurement: "°C"
    update_interval: 0.1s
          
  - platform: custom_ezo
    id: ${device_name}_ph
    name: ${device_name_upper}.ph
    address: 99
    accuracy_decimals: 2
    unit_of_measurement: "pH"
    update_interval: 0.1s
          
  - platform: custom_ezo
    id: ${device_name}_ec
    name: ${device_name_upper}.ec
    address: 100
    accuracy_decimals: 2
    unit_of_measurement: "μS/cm"
    update_interval: 0.1s

binary_sensor:
  - platform: template
    name: "${device_name_upper}.rtd.error"
    id: ${device_name}_rtd_error
    lambda: |-
      if (id(${device_name}_rtd).retry_counter() >= ${max_retry_attempts})
      {
         return true;
      }else
      {
        return false;
      }
    on_press:
      then:
        if:
          condition:
            lambda: |-
              return id(rtd_enabled);
          then:
            - switch.turn_off: ${device_name}_rtd_enable
            - delay: 2s
            - switch.turn_on: ${device_name}_rtd_enable
              
  - platform: template
    name: "${device_name_upper}.ph.error"
    id: ${device_name}_ph_error
    lambda: |-
      if (id(${device_name}_ph).retry_counter() >= ${max_retry_attempts})
      {
         return true;
      }else
      {
        return false;
      }
    on_press:
      then:
        if:
          condition:
            lambda: |-
              return id(rtd_enabled);
          then:
            - switch.turn_off: ${device_name}_ph_enable
            - delay: 2s
            - switch.turn_on: ${device_name}_ph_enable
  
  - platform: template
    name: "${device_name_upper}.ec.error"
    id: ${device_name}_ec_error
    lambda: |-
      if (id(${device_name}_ec).retry_counter() >= ${max_retry_attempts})
      {
         return true;
      }else
      {
        return false;
      }
    on_press:
      then:
        if:
          condition:
            lambda: |-
              return id(rtd_enabled);
          then:
            - switch.turn_off: ${device_name}_ec_enable
            - delay: 2s
            - switch.turn_on: ${device_name}_ec_enable
              
interval:
  - interval: 1s
    then:
      lambda: |-
        if (id(ec_tempcomp_enabled))
        {
          int time_now = millis();
          // integer overflow protection -> restart waiting timer -> (TODO: maybe implement exact value reset via max integer)
          if (time_now < id(ec_tempcomp_timestamp_0))
          	id(ec_tempcomp_timestamp_0) = time_now;
          
          // check if we should send a sample
          if (time_now - id(ec_tempcomp_timestamp_0) >= id(${device_name}_ec_tempcomp_sample_interval).state)
          {
            id(${device_name}_ec).set_tempcomp_value(id(${device_name}_rtd).state);
            id(ec_tempcomp_timestamp_0) = time_now;
          }
        }
        else
        {
          id(${device_name}_ec).set_tempcomp_value(id(tempcomp_default_value));
        }
          
        if(id(ph_tempcomp_enabled))
        {
          int time_now = millis();
          
          // integer overflow protection -> restart waiting timer -> (TODO: maybe implement exact value reset via max integer)
          if (time_now < id(ph_tempcomp_timestamp_0))
          	id(ph_tempcomp_timestamp_0) = time_now;
          
          // check if we should send a sample
          if (time_now - id(ph_tempcomp_timestamp_0) >= id(${device_name}_ph_tempcomp_sample_interval).state)
          {
            id(${device_name}_ph).set_tempcomp_value(id(${device_name}_rtd).state);
            id(ph_tempcomp_timestamp_0) = time_now;
          }
        }
        else
        {
          id(${device_name}_ph).set_tempcomp_value(id(tempcomp_default_value));
        }