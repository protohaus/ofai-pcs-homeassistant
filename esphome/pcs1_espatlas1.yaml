substitutions:
  #general settings
  host_name: pcs1-espatlas1
  device_name: pcs1_espatlas1
  device_name_upper: pcs1.espatlas1
  status_led_pin: GPIO33
  status_led_interval_ok: 10s
  status_led_interval_booting: 3s
  
  #I2C Bus
  i2c_bus_a_name: i2c_bus_a
  i2c_bus_a_sda: GPIO23
  i2c_bus_a_scl: GPIO22
  
  #Temp Enable Pin
  enable_temp_pin: GPIO33
  enable_aux_pin: GPIO27
  enable_cond_pin: GPIO12
  enable_ph_pin: GPIO13
  
  # webserver
  web_server_ota_active: "true"
  
  # EZO Settings
  min_sample_interval_cond: "2000" # 1s
  max_sample_interval_cond: "3600000" # 60min
  
  min_sample_interval_ph: "2000" # 1s
  max_sample_interval_ph: "3600000" # 60min
  
  min_sample_interval_temp: "1000" # 1s
  max_sample_interval_temp: "3600000" # 60min
  
  min_sample_interval_cond_tempcomp: "10000" 
  max_sample_interval_cond_tempcomp: "3600000"
  
  min_sample_interval_ph_tempcomp: "10000" 
  max_sample_interval_ph_tempcomp: "3600000"
  
  
esphome:
  name: ${host_name}
  platform: ESP32
  board: esp32dev
  #board: nodemcu-32s
  #name_add_mac_suffix: "true"  
  on_boot:
    priority: -100 # Highest priority, ensures enable pin to be turned off first
    then:
      - lambda: |-
          id(${device_name}_cond).set_sensor_type(esphome::ezo::SENSOR_TYPE_COND);
          id(${device_name}_ph).set_sensor_type(esphome::ezo::SENSOR_TYPE_PH);
          id(${device_name}_temp).set_sensor_type(esphome::ezo::SENSOR_TYPE_TEMP);
          
          /***************************************************************
          * enable/disable sensors depending on last boot sensor states
          ***************************************************************/
          if(id(cond_enabled))
            id(${device_name}_cond_enable).turn_on();
          else
            id(${device_name}_cond_enable).turn_off();
          
          if(id(temp_enabled))
            id(${device_name}_temp_enable).turn_on();
          else
            id(${device_name}_temp_enable).turn_off();
          
          if(id(ph_enabled))
            id(${device_name}_ph_enable).turn_on();
          else
            id(${device_name}_ph_enable).turn_off();
          
            
          /***************************************************************
          * enable/disable temp compensation depending on last boot states
          ***************************************************************/  
          if(id(cond_tempcomp_enabled))
            id(${device_name}_cond_tempcomp).turn_on();
          else
            id(${device_name}_cond_tempcomp).turn_off();
          
          if(id(ph_tempcomp_enabled))
            id(${device_name}_ph_tempcomp).turn_on();
          else
            id(${device_name}_ph_tempcomp).turn_off();
            
          /***************************************************************
          * enable/disable value sending
          ***************************************************************/  
          
          if(id(cond_sending_enabled))
            id(${device_name}_cond_enable_sending_values).turn_on();
          else
            id(${device_name}_cond_enable_sending_values).turn_off();
          
          if(id(ph_sending_enabled))
            id(${device_name}_ph_enable_sending_values).turn_on();
          else
            id(${device_name}_ph_enable_sending_values).turn_off();
          
          if(id(temp_sending_enabled))
            id(${device_name}_temp_enable_sending_values).turn_on();
          else
            id(${device_name}_temp_enable_sending_values).turn_off();
          

# Enable logging
logger:
  level: DEBUG
  
preferences:
  flash_write_interval: 1min
  
packages:
  common_wifi: !include common/wifi.yaml
  common_base: !include common/base.yaml
  common_status: !include common/status.yaml
  common_restart: !include common/restart.yaml
  common_i2c_bus_a: !include common/i2c_bus_a.yaml
  common_web_server: !include common/web_server.yaml
  common_stream_server: !include common/stream_server.yaml
  #common_api_encryption: !include common/api_encryption.yaml

globals:
   
  ############################################################
  ##
  ##  STORE ENABLE STATES
  ##
  ############################################################
   
   - id: cond_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: ph_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   - id: temp_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: cond_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
   
   - id: ph_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   - id: temp_sending_enabled
     type: bool
     restore_value: yes
     initial_value: 'true'
     
   ############################################################
   ##
   ##  STORE TEMPCOMP SETTINGS
   ##
   ############################################################
  
   - id: cond_tempcomp_enabled
     type: bool
     restore_value: yes
     initial_value: 'false'
   
   - id: ph_tempcomp_enabled
     type: bool
     restore_value: yes
     initial_value: 'false'
     
   - id: tempcomp_default_value
     type: float
     restore_value: no
     initial_value: '25.0'
     
   - id: cond_tempcomp_timestamp_0
     type: int
     restore_value: no
     initial_value: '0' 
   
   - id: ph_tempcomp_timestamp_0
     type: int
     restore_value: no
     initial_value: '0' 

output:

  ############################################################
  ##
  ##  ENABLE GPIO PINS
  ##
  ############################################################
  
  - platform: gpio
    pin: ${enable_cond_pin}
    id: ${device_name}_cond_enable_pin
  
  - platform: gpio
    pin: ${enable_ph_pin}
    id: ${device_name}_ph_enable_pin
    
  - platform: gpio
    pin: ${enable_temp_pin}
    id: ${device_name}_temp_enable_pin
     
switch:
  
  ############################################################
  ##
  ##  TEMPERATURE COMPENSATION
  ##
  ############################################################
  
  - platform: template
    name: ${device_name_upper}.cond.tempcomp
    id: ${device_name}_cond_tempcomp
    lambda: |-
      return id(cond_tempcomp_enabled);
    turn_on_action:
      - lambda: |-
          id(cond_tempcomp_enabled) = true;
          id(cond_tempcomp_timestamp_0) = millis();
    turn_off_action:
      - lambda: |-
          id(cond_tempcomp_enabled) = false;
  
  - platform: template
    name: ${device_name_upper}.ph.tempcomp
    id: ${device_name}_ph_tempcomp
    lambda: |-
      return id(ph_tempcomp_enabled);
    turn_on_action:
      - lambda: |-
          id(ph_tempcomp_enabled) = true;
          id(ph_tempcomp_timestamp_0) = millis();
    turn_off_action:
      - lambda: |-
          id(ph_tempcomp_enabled) = false;
          
  ############################################################
  ##
  ##  CALIBRATION MODE
  ##
  ############################################################
  - platform: template
    name: ${device_name_upper}.temp.calibration_mode
    id: ${device_name}_temp_calibration_mode
    lambda: |-
      return id(${device_name}_temp).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_temp).activate_calibration();
    turn_off_action:
      - lambda: |-
          id(${device_name}_temp).deactivate_calibration();
  
  - platform: template
    name: ${device_name_upper}.ph.calibration_mode
    id: ${device_name}_ph_calibration_mode
    lambda: |-
      return id(${device_name}_ph).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).activate_calibration();
      
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).deactivate_calibration();
          
  - platform: template
    name: ${device_name_upper}.cond.calibration_mode
    id: ${device_name}_cond_calibration_mode
    restore_state: "true"
    lambda: |-
      return id(${device_name}_cond).calibration_mode_active();
    turn_on_action:
      - lambda: |-
          id(${device_name}_cond).activate_calibration();
      
    turn_off_action:
      - lambda: |-
          id(${device_name}_cond).deactivate_calibration();

  ############################################################
  ##
  ##  ENABLE/DISABLE SENSORS
  ##
  ############################################################
  
  - platform: template
    id: ${device_name}_temp_enable
    name: ${device_name_upper}.temp.enable
    lambda: |-
      return id(${device_name}_temp).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_temp).enable_sensor();
      - globals.set:
          id: temp_enabled
          value: "true"
      - output.turn_on: ${device_name}_temp_enable_pin
    turn_off_action:
      - lambda: |-
          id(${device_name}_temp).disable_sensor();
      - globals.set:
          id: temp_enabled
          value: "false"
      - output.turn_off: ${device_name}_temp_enable_pin 
      - switch.turn_off: ${device_name}_cond_enable
      - switch.turn_off: ${device_name}_ph_enable
   
  - platform: template
    id: ${device_name}_cond_enable
    name: ${device_name_upper}.cond.enable
    lambda: |-
      return id(${device_name}_cond).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_cond).enable_sensor();
      - globals.set:
          id: cond_enabled
          value: "true"
      - output.turn_off: ${device_name}_cond_enable_pin
      - switch.turn_on: ${device_name}_temp_enable
    turn_off_action:
      - lambda: |-
          id(${device_name}_cond).disable_sensor();
      - globals.set:
          id: cond_enabled
          value: "false"
      - output.turn_on: ${device_name}_cond_enable_pin 
    
  - platform: template
    id: ${device_name}_ph_enable
    name: ${device_name_upper}.ph.enable
    lambda: |-
      return id(${device_name}_ph).sensor_enabled();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).enable_sensor();
      - globals.set:
          id: ph_enabled
          value: "true"
      - output.turn_off: ${device_name}_ph_enable_pin
      - switch.turn_on: ${device_name}_temp_enable
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).disable_sensor();
      - globals.set:
          id: ph_enabled
          value: "false"
      - output.turn_on: ${device_name}_ph_enable_pin 

  ############################################################
  ##
  ##  ENABLE / DISABLE VALUE SENDING
  ##
  ############################################################
  
  - platform: template
    id: ${device_name}_temp_enable_sending_values
    name: ${device_name_upper}.temp.enable_sending_values
    lambda: |-
      return id(${device_name}_temp).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_temp).enable_sending_values();
          id(temp_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_temp).disable_sending_values();
          id(temp_sending_enabled) = false;
          
  - platform: template
    id: ${device_name}_ph_enable_sending_values
    name: ${device_name_upper}.ph.enable_sending_values
    lambda: |-
      return id(${device_name}_ph).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_ph).enable_sending_values();
          id(ph_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_ph).disable_sending_values();
          id(ph_sending_enabled) = false;
   
  - platform: template
    id: ${device_name}_cond_enable_sending_values
    name: ${device_name_upper}.cond.enable_sending_values
    lambda: |-
      return id(${device_name}_cond).sending_values();
    turn_on_action:
      - lambda: |-
          id(${device_name}_cond).enable_sending_values();
          id(cond_sending_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(${device_name}_cond).disable_sending_values();
          id(cond_sending_enabled) = false;
          
button:
  
  ############################################################
  ##
  ##  ENABLE/DISABLE ALL SENSORS
  ##
  ############################################################
  - platform: template
    name: ${device_name_upper}.all.enable
    id: ${device_name}_all_enable
    on_press:
      - switch.turn_on: ${device_name}_temp_enable
      - switch.turn_on: ${device_name}_cond_enable
      - switch.turn_on: ${device_name}_ph_enable
  
  - platform: template
    name: ${device_name_upper}.all.disable
    id: ${device_name}_all_disable
    on_press:
      - switch.turn_off: ${device_name}_temp_enable
      - switch.turn_off: ${device_name}_cond_enable
      - switch.turn_off: ${device_name}_ph_enable

number:
  
  ############################################################
  ##
  ##  SAMPLE INTERVAL TIMES IN [MS]
  ##
  ############################################################
  
  - platform: template
    min_value: ${min_sample_interval_temp}
    max_value: ${max_sample_interval_temp}
    step: "1"
    id: ${device_name}_temp_sample_interval
    name: ${device_name}.temp.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_temp}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_temp).set_sample_interval(x);
  
  - platform: template
    min_value: ${min_sample_interval_ph}
    max_value: ${max_sample_interval_ph}
    step: "1"
    id: ${device_name}_ph_sample_interval
    name: ${device_name}.ph.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ph}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_ph).set_sample_interval(x);
         
  - platform: template
    min_value: ${min_sample_interval_cond}
    max_value: ${max_sample_interval_cond}
    step: "1"
    id: ${device_name}_cond_sample_interval
    name: ${device_name}.cond.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_cond}
    update_interval: "10s"
    unit_of_measurement: "ms"
    on_value:
      - lambda: |-
         id(${device_name}_cond).set_sample_interval(x);
  

  ############################################################
  ##
  ##  TEMPCOMP INTERVAL TIMES IN [MS]
  ##
  ############################################################
  - platform: template
    min_value: ${min_sample_interval_cond_tempcomp}
    max_value: ${max_sample_interval_cond_tempcomp}
    step: "1"
    id: ${device_name}_cond_tempcomp_sample_interval
    name: ${device_name}.cond.tempcomp.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_cond_tempcomp}
    update_interval: "10s"
    unit_of_measurement: "ms"
  
  - platform: template
    min_value: ${min_sample_interval_ph_tempcomp}
    max_value: ${max_sample_interval_ph_tempcomp}
    step: "1"
    id: ${device_name}_ph_tempcomp_sample_interval
    name: ${device_name}.ph.tempcomp.sample_interval
    optimistic: true
    mode: box
    restore_value : true
    initial_value: ${min_sample_interval_ph_tempcomp}
    update_interval: "10s"
    unit_of_measurement: "ms"
  
sensor:
  
  ############################################################
  ##
  ##  SENSOR DEFINITIONS
  ##
  ############################################################
  
  - platform: custom_ezo
    id: ${device_name}_temp
    name: ${device_name_upper}.temp
    address: 102
    accuracy_decimals: 2
    unit_of_measurement: "°C"
    update_interval: 0.1s
          
  - platform: custom_ezo
    id: ${device_name}_ph
    name: ${device_name_upper}.ph
    address: 99
    accuracy_decimals: 2
    unit_of_measurement: "pH"
    update_interval: 0.1s
          
  - platform: custom_ezo
    id: ${device_name}_cond
    name: ${device_name_upper}.cond
    address: 100
    accuracy_decimals: 2
    unit_of_measurement: "μS/cm"
    update_interval: 0.1s
    
interval:
  - interval: 1s
    then:
      lambda: |-
        if (id(cond_tempcomp_enabled))
        {
          int time_now = millis();
          // integer overflow protection -> restart waiting timer -> (TODO: maybe implement exact value reset via max integer)
          if (time_now < id(cond_tempcomp_timestamp_0))
          	id(cond_tempcomp_timestamp_0) = time_now;
          
          // check if we should send a sample
          if (time_now - id(cond_tempcomp_timestamp_0) >= id(${device_name}_cond_tempcomp_sample_interval).state)
          {
            id(${device_name}_cond).set_tempcomp_value(id(${device_name}_temp).state);
            id(cond_tempcomp_timestamp_0) = time_now;
          }
        }
        else
        {
          id(${device_name}_cond).set_tempcomp_value(id(tempcomp_default_value));
        }
          
        if(id(ph_tempcomp_enabled))
        {
          int time_now = millis();
          
          // integer overflow protection -> restart waiting timer -> (TODO: maybe implement exact value reset via max integer)
          if (time_now < id(ph_tempcomp_timestamp_0))
          	id(ph_tempcomp_timestamp_0) = time_now;
          
          // check if we should send a sample
          if (time_now - id(ph_tempcomp_timestamp_0) >= id(${device_name}_ph_tempcomp_sample_interval).state)
          {
            id(${device_name}_ph).set_tempcomp_value(id(${device_name}_temp).state);
            id(ph_tempcomp_timestamp_0) = time_now;
          }
        }
        else
        {
          id(${device_name}_ph).set_tempcomp_value(id(tempcomp_default_value));
        }